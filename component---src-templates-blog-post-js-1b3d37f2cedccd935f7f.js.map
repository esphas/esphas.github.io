{"version":3,"sources":["webpack:///./src/components/seo.js","webpack:///./src/templates/blog-post.js"],"names":["SEO","title","description","image","pathname","article","query","render","site","siteMetadata","defaultTitle","titleTemplate","defaultDescription","siteUrl","defaultImage","seo","url","name","content","property","defaultProps","PostPage","pageContext","post","data","markdownRemark","frontmatter","excerpt","dangerouslySetInnerHTML","__html","html","css","previous","to","fields","slug","next"],"mappings":"4FACA,6DAKMA,EAAM,SAAH,OAAMC,EAAK,EAALA,MAAOC,EAAW,EAAXA,YAAaC,EAAK,EAALA,MAAOC,EAAQ,EAARA,SAAUC,EAAO,EAAPA,QAAO,OACzD,YAAC,cAAW,CACVC,MAAOA,EACPC,OAAQ,YAUD,IAAD,IATJC,KACEC,aACEC,EAAY,EAAZA,aACAC,EAAa,EAAbA,cACAC,EAAkB,EAAlBA,mBACAC,EAAO,EAAPA,QACAC,EAAY,EAAZA,aAIEC,EAAM,CACVd,MAAOA,GAASS,EAChBR,YAAaA,GAAeU,EAC5BI,IAAI,GAAIH,GAAUT,GAAY,KAC9BD,MAAM,GAAIU,GAAUV,GAASW,IAG/B,OACE,8BACE,YAAC,SAAM,CAACb,MAAOc,EAAId,MAAOU,cAAeA,GACvC,oBAAMM,KAAK,cAAcC,QAASH,EAAIb,cACtC,oBAAMe,KAAK,QAAQC,QAASH,EAAIZ,QAC/BY,EAAIC,KAAO,oBAAMG,SAAS,SAASD,QAASH,EAAIC,OAC/CX,EAAiB,KACjB,oBAAMc,SAAS,UAAUD,QAAQ,YAElCH,EAAId,OAAS,oBAAMkB,SAAS,WAAWD,QAASH,EAAId,QACpDc,EAAIb,aACH,oBAAMiB,SAAS,iBAAiBD,QAASH,EAAIb,cAE9Ca,EAAIZ,OAAS,oBAAMgB,SAAS,WAAWD,QAASH,EAAIZ,cAgBjEH,EAAIoB,aAAe,CACjBnB,MAAO,KACPC,YAAa,KACbC,MAAO,KACPC,SAAU,KACVC,SAAS,GAGIL,MAEf,IAAMM,EAAK,c,uGC7D+B,2EAkC3Be,UAhCE,SAAH,GAA+B,IAAzBC,EAAW,EAAXA,YACZC,EAD6B,EAAJC,KACbC,eAClB,OACE,YAAC,IAAM,KACL,YAAC,IAAG,CACFxB,MAAOsB,EAAKG,YAAYzB,MACxBC,YAAaqB,EAAKG,YAAYxB,aAAeqB,EAAKI,QAClDtB,SAAS,IAEX,2BACE,sBAAMkB,EAAKG,YAAYzB,OACvB,mBAAK2B,wBAAyB,CAAEC,OAAQN,EAAKO,SAE/C,mBAAKC,IAAG,GAIN,wBACGT,EAAYU,UACX,YAAC,OAAI,CAACC,GAAIX,EAAYU,SAASE,OAAOC,MAAK,cAG/C,wBACGb,EAAYc,MACX,YAAC,OAAI,CAACH,GAAIX,EAAYc,KAAKF,OAAOC,MAAK","file":"component---src-templates-blog-post-js-1b3d37f2cedccd935f7f.js","sourcesContent":["\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\nimport PropTypes from 'prop-types';\nimport { StaticQuery, graphql } from 'gatsby';\n\nconst SEO = ({ title, description, image, pathname, article }) => (\n  <StaticQuery\n    query={query}\n    render={({\n      site: {\n        siteMetadata: {\n          defaultTitle,\n          titleTemplate,\n          defaultDescription,\n          siteUrl,\n          defaultImage,\n        },\n      },\n    }) => {\n      const seo = {\n        title: title || defaultTitle,\n        description: description || defaultDescription,\n        url: `${siteUrl}${pathname || \"/\"}`,\n        image: `${siteUrl}${image || defaultImage}`,\n      };\n\n      return (\n        <>\n          <Helmet title={seo.title} titleTemplate={titleTemplate}>\n            <meta name=\"description\" content={seo.description} />\n            <meta name=\"image\" content={seo.image} />\n            {seo.url && <meta property=\"og:url\" content={seo.url} />}\n            {(article ? true : null) && (\n              <meta property=\"og:type\" content=\"article\" />\n            )}\n            {seo.title && <meta property=\"og:title\" content={seo.title} />}\n            {seo.description && (\n              <meta property=\"og:description\" content={seo.description} />\n            )}\n            {seo.image && <meta property=\"og:image\" content={seo.image} />}\n          </Helmet>\n        </>\n      );\n    }}\n  />\n);\n\nSEO.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n  image: PropTypes.string,\n  pathname: PropTypes.string,\n  article: PropTypes.bool,\n};\n\nSEO.defaultProps = {\n  title: null,\n  description: null,\n  image: null,\n  pathname: null,\n  article: false,\n};\n\nexport default SEO;\n\nconst query = graphql`\n  query {\n    site {\n      siteMetadata {\n        defaultTitle: title\n        titleTemplate\n        defaultDescription: description\n        siteUrl\n        defaultImage: image\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport { Link, graphql } from 'gatsby';\nimport { css } from '@emotion/core';\n\nimport SEO from '../components/seo';\nimport Layout from '../components/layout';\n\nconst PostPage = ({ pageContext, data }) => {\n  const post = data.markdownRemark;\n  return (\n    <Layout>\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n        article={true}\n      />\n      <article>\n        <h1>{ post.frontmatter.title }</h1>\n        <div dangerouslySetInnerHTML={{ __html: post.html }} />\n      </article>\n      <div css={css`\n        display: flex;\n        justify-content: space-between;\n      `}>\n        <span>\n          {pageContext.previous && (\n            <Link to={pageContext.previous.fields.slug}>&lt;Previous</Link>\n          )}\n        </span>\n        <span>\n          {pageContext.next && (\n            <Link to={pageContext.next.fields.slug}>Next&gt;</Link>\n          )}\n        </span>\n      </div>\n    </Layout>\n  );\n};\n\nexport default PostPage;\n\nexport const query = graphql`\n  query($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}